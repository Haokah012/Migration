CREATE PROCEDURE [SkyNet].[Select_TableDependencyLevel]
(
    @Schema         VARCHAR(50),
    @DataSource     VARCHAR(100),
    @TargetDatabase VARCHAR(200),
    @TransactionID  INT           = NULL,
    @StartNewTran   BIT           = 0,
    @IncidentOutput VARCHAR(2000) = NULL OUTPUT,
    @ThisProgram    VARCHAR(1000) = NULL OUTPUT,
    @Success        BIT           = 1 OUTPUT
)
AS
    DECLARE @DatabaseName   VARCHAR(20) = DB_NAME(),
            @LogID          INT,
            @SignUpTypeID   INT         = 1, --Default
            @SourceFileName VARCHAR(20) = '',
            @Query          VARCHAR(MAX);
    BEGIN
        BEGIN TRY
            SELECT @ThisProgram = OBJECT_SCHEMA_NAME(@@PROCID) + '.' + OBJECT_NAME(@@PROCID);

            EXECUTE SkyNet.syn_Log_Begin_Transaction @ThisProgram = @ThisProgram,
                                                     @DatabaseName = @DatabaseName,
                                                     @StartNewTran = @StartNewTran OUTPUT,
                                                     @TransactionID = @TransactionID OUTPUT;

            IF @StartNewTran = 1
                BEGIN TRANSACTION;

            EXECUTE SkyNet.syn_Insert_Audit_Log @TransactionID = @TransactionID,
                                                @LogSourceOfCode = @ThisProgram,
                                                @StatusID = 1,
                                                @LogID = @LogID OUTPUT;

            SET @Query = 'WITH cte (lvl, object_id, name, schema_Name)
                          AS
                              (SELECT 1,
                                      object_id,
                                      t.name,
                                      s.name AS schema_Name
                               FROM ' + @TargetDatabase
                         + '.sys.tables t
                                   INNER JOIN ' + @TargetDatabase
                         + '.sys.schemas s
                                      ON t.schema_id = s.schema_id
                               WHERE type_desc     = ''USER_TABLE''
                                 AND is_ms_shipped = 0
                                 AND (t.name LIKE ''' + @DataSource + '[_]%'' OR t.name LIKE ''' + @DataSource
                         + ''')
                                 AND s.name =''' + @Schema
                         + '''
                               UNION ALL
                               SELECT cte.lvl + 1,
                                      t.object_id,
                                      t.name,
                                      S.name AS schema_Name
                               FROM cte
                                   JOIN ' + @TargetDatabase
                         + '.sys.tables  AS t
                                     ON EXISTS (SELECT NULL
                                                FROM ' + @TargetDatabase
                         + '.sys.foreign_keys AS fk
                                                WHERE fk.parent_object_id     = t.object_id
                                                  AND fk.referenced_object_id = cte.object_id)
                                   JOIN ' + @TargetDatabase
                         + '.sys.schemas AS S
                                     ON t.schema_id = S.schema_id
                                    AND t.object_id <> cte.object_id
                                    AND cte.lvl     < 30
                                    AND (t.name LIKE ''' + @DataSource + '[_]%'' OR t.name LIKE ''' + @DataSource
                         + ''')
                               WHERE t.type_desc     = ''USER_TABLE''
                                 AND t.is_ms_shipped = 0)
                          SELECT ''' + @TargetDatabase
                         + ''' tableCatalog,
                          	   schema_Name tableSchema,
                                 name tableName,
                                 MAX(lvl) AS dependency_level
                          FROM cte
                          GROUP BY schema_Name,
                                   name
                          ORDER BY dependency_level,
                                   schema_Name,
                                   name;';

            EXEC (@Query);

            ----Jump to Catch Block if nested stored proc failed --> @Success <> 1
            IF @Success <> 1
                THROW 50000, @IncidentOutput, 1;
            ELSE
                BEGIN
                    EXECUTE SkyNet.syn_Log_Commit_Transaction @TransactionID = @TransactionID,
                                                              @LogID = @LogID,
                                                              @NestLevel = @@NESTLEVEL;

                    IF @StartNewTran = 1
                        COMMIT TRAN;
                END;
        END TRY
        BEGIN CATCH
            SET @Success = 0; --"Fail"
            IF @IncidentOutput IS NULL
                SELECT @IncidentOutput = 'Error Number ' + CAST(ERROR_NUMBER() AS VARCHAR(10)) + ' - '
                                         + ERROR_MESSAGE(),
                       @ThisProgram    = OBJECT_SCHEMA_NAME(@@PROCID) + '.' + OBJECT_NAME(@@PROCID);

            IF @@TRANCOUNT > 0
           AND @StartNewTran = 1
                BEGIN
                    ROLLBACK TRANSACTION;
                END;

            IF @@NESTLEVEL <= 1 --Look into this for procedures not using a transaction
                BEGIN
                    EXECUTE SkyNet.syn_Log_Rollback_Transaction @TransactionID = @TransactionID,
                                                                @ThisProgram = @ThisProgram,
                                                                @SignUpTypeID = @SignUpTypeID,
                                                                @IncidentOutput = @IncidentOutput,
                                                                @IsIncident = 1,
                                                                @IsWarning = 0,
                                                                @LogID = @LogID; --"Error"
                END;

        END CATCH;
    END;

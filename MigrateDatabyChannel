CREATE PROCEDURE [SkyNet].[MigrateDataByChannel]
(
    @SourceDatabase VARCHAR(200),
    @TargetDatabase VARCHAR(200),
    @Channel        VARCHAR(100),
    @SourceSchema   VARCHAR(50)   = NULL,
    @TargetSchema   VARCHAR(50)   = NULL,
    @TransactionID  INT           = NULL,
    @StartNewTran   BIT           = NULL,
    @IncidentOutput VARCHAR(2000) = NULL OUTPUT,
    @ThisProgram    VARCHAR(1000) = NULL OUTPUT,
    @Success        BIT           = 1 OUTPUT
)
AS
    DECLARE @DatabaseName   VARCHAR(20)  = @TargetDatabase,
            @LogID          INT,
            @SignUpTypeID   INT          = 1, --Default
            @SourceFileName VARCHAR(200) = 'Migrating data for ' + @Channel + ' Channel';
    BEGIN

        BEGIN TRY

            SELECT @ThisProgram = 'MigrateData for Channel ' + @Channel;

            --set @StaartNewTran to 1 if not provided as we want to start a transaction
            IF @StartNewTran IS NULL
                SET @StartNewTran = 1;

            EXECUTE SkyNet.syn_Log_Begin_Transaction @ThisProgram = @ThisProgram,
                                                     @DatabaseName = @DatabaseName,
                                                     @SourceFileName = @SourceFileName,
                                                     @StartNewTran = @StartNewTran OUTPUT,
                                                     @TransactionID = @TransactionID OUTPUT;

            IF @StartNewTran = 1
                BEGIN TRANSACTION;

            EXECUTE SkyNet.syn_Insert_Audit_Log @TransactionID = @TransactionID,
                                                @LogSourceOfCode = @ThisProgram,
                                                @StatusID = 1,
                                                @LogID = @LogID OUTPUT;

            IF @TargetSchema IS NULL
           AND @SourceSchema IS NULL
                BEGIN
                    RAISERROR('Either source or target schema must be provided!', 14, 1);
                END;

            IF @TargetSchema IS NULL
                SET @TargetSchema = @SourceSchema;

            IF @SourceSchema IS NULL
                SET @SourceSchema = @TargetSchema;

            DECLARE @DataSource VARCHAR(50);
            DECLARE @Statement VARCHAR(500);
            DECLARE @i INT = 1;

            DECLARE @tmpTable TABLE
            (
                id             INT IDENTITY(1, 1) PRIMARY KEY,
                DataSourceName VARCHAR(100)
            );

            --fetch datasource names from config tables for the channel being migrated and insert into @tmptable
            SET @Statement = 'SELECT DataSourceName FROM ' + @TargetDatabase
                             + '.Everest.Config_Channel  c             
                              JOIN ' + @TargetDatabase
                             + '.Everest.Config_ChannelDataSource cds
                                ON c.ChannelID      = cds.ChannelID
                              JOIN ' + @TargetDatabase
                             + '.Everest.Config_DataSource        ds
                                ON cds.DataSourceID = ds.DataSourceID
                              WHERE ChannelName = ''' + @Channel + ''';';

            INSERT INTO @tmpTable (DataSourceName)
            EXEC (@Statement);

            --loop through each datasource name in @tmpTable and mirate data for the source using MigrateDataByDataSource Procedure
            WHILE EXISTS (SELECT DataSourceName FROM @tmpTable WHERE id = @i)
                BEGIN
                    SELECT @DataSource = DataSourceName
                    FROM @tmpTable
                    WHERE id = @i;

                    IF @StartNewTran = 0
                    OR @Success IS NULL
                        SET @Success = 1;

                   --execute only if previous datasource succeeds i.e. @Success = 1 when there is a transaction
                    IF ( @StartNewTran = 1
                     AND @Success = 1)
                    OR @StartNewTran = 0
                        EXEC SkyNet.MigrateDataByDataSource @SourceDatabase = @SourceDatabase, -- varchar(200)
                                                            @TargetDatabase = @TargetDatabase, -- varchar(200)
                                                            @TransactionID = @TransactionID,
                                                            @TargetSchema = @TargetSchema,     -- varchar(50)
                                                            @SourceSchema = @SourceSchema,     -- varchar(50)
                                                            @DataSource = @DataSource,         -- varchar(100)
                                                            @IncidentOutput = @IncidentOutput OUTPUT,
                                                            @Success = @Success OUTPUT;
                    SET @i = @i + 1;
                END;

            --If @StartNewTran = 1 the entire proc will roll back if one data source fails to migrate.
            --If @StartNewTran = 0 migration of other data source will continue if one dat source fails to migrate.
            ----Jump to Catch Block if nested stored proc failed --> @Success <> 1
            IF (@Success <> 1 AND @StartNewTran = 1)
                THROW 50000, @IncidentOutput, 1;
            ELSE
                BEGIN
                    EXECUTE SkyNet.syn_Log_Commit_Transaction @TransactionID = @TransactionID,
                                                              @LogID = @LogID,
                                                              @NestLevel = @@NESTLEVEL;

                    IF @StartNewTran = 1
                        COMMIT TRAN;
                END;
        END TRY
        BEGIN CATCH
            SET @Success = 0; --"Fail"
            IF @IncidentOutput IS NULL
                SELECT @IncidentOutput = 'Error Number ' + CAST(ERROR_NUMBER() AS VARCHAR(10)) + ' - '
                                         + ERROR_MESSAGE(),
                       @ThisProgram    = 'MigrateData for Channel ' + @Channel;

            IF @@TRANCOUNT > 0
           AND @StartNewTran = 1
                ROLLBACK TRANSACTION;

            IF @@NESTLEVEL <= 1 --Look into this for procedures not using a transaction
                BEGIN
                    EXECUTE SkyNet.syn_Log_Rollback_Transaction @TransactionID = @TransactionID,
                                                                @ThisProgram = @ThisProgram,
                                                                @SignUpTypeID = @SignUpTypeID,
                                                                @IncidentOutput = @IncidentOutput,
                                                                @IsIncident = 1,
                                                                @IsWarning = 0,
                                                                @LogID = @LogID; --"Error"
                END;

        END CATCH;
    END;
